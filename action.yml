name: 'Checkout'
description: 'Checkout a Git repository at a particular version'
inputs:
  repository:
    description: 'Repository name with owner. For example, actions/checkout'
    default: ${{ github.repository }}
  ref:
    description: >
      The branch, tag or SHA to checkout. When checking out the repository that
      triggered a workflow, this defaults to the reference or SHA for that
      event.  Otherwise, uses the default branch.
  token:
    description: >
      Personal access token (PAT) used to fetch the repository. The PAT is configured
      with the local git config, which enables your scripts to run authenticated git
      commands. The post-job step removes the PAT.


      We recommend using a service account with the least permissions necessary.
      Also when generating a new PAT, select the least scopes necessary.


      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
    default: ${{ github.token }}
  ssh-key:
    description: >
      SSH key used to fetch the repository. The SSH key is configured with the local
      git config, which enables your scripts to run authenticated git commands.
      The post-job step removes the SSH key.


      We recommend using a service account with the least permissions necessary.


      [Learn more about creating and using
      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
  ssh-known-hosts:
    description: >
      Known hosts in addition to the user and global host key database. The public
      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,
      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.
  ssh-strict:
    description: >
      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`
      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to
      configure additional hosts.
    default: true
  persist-credentials:
    description: 'Whether to configure the token or SSH key with the local git config'
    default: true
  path:
    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'
  clean:
    description: 'Whether to execute `git clean -ffdx && git reset --hard HEAD` before fetching'
    default: true
  fetch-depth:
    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'
    default: 1
  lfs:
    description: 'Whether to download Git-LFS files'
    default: false
  submodules:
    description: >
      Whether to checkout submodules: `true` to checkout submodules or `recursive` to
      recursively checkout submodules.


      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are
      converted to HTTPS.
    default: false
  set-safe-directory:
    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory <path>`
    default: true
 
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#example-declaring-outputs-for-composite-actions
outputs:
  a:
    description: "The scan results file a"
    value: ${{ steps.set-a.outputs.a }}
  b:
    description: "The scan results file b"
    value: ${{ steps.set-b.outputs.b }}

runs:
  # https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
  using: composite
  steps:
    - name: Envs envs
      id: set-a
      # Avoid "Required property is missing: shell"
      # https://stackoverflow.com/questions/71041836/github-actions-required-property-is-missing-shell/71042698#71042698
      shell: bash
      run: |
        echo "Testing here is the ${TESTING}"
        echo "::set-output name=a::111111"

    - name: Scan docker image with Twistcli with given parameters
      id: set-b
      # Avoid "Required property is missing: shell"
      # https://stackoverflow.com/questions/71041836/github-actions-required-property-is-missing-shell/71042698#71042698
      shell: bash
      run: |
        echo "Testing here is the ${TESTING}"
        cat <<EOT >> docker-compose-blackduck-detect-sca.yaml
        version: "3.9"

        echo "::set-output name=b::222222"

        #### $ docker run --rm -e PIPENV_SYNC_CMD="pipenv sync -v"
        #              -v $(pwd):$(pwd) -w $(pwd) -v ./build/pip-cache:/root/.local
        #              seceng-devsecops-platform.docker.artifactory.company.com/devsecops/client/runtime/blackduck/7-python-3.9-05ed1a9203b624b30c49ba387f3d2cb73d874746
        #      -de --blackduck.url= --blackduck.api.token= --detect.project.name= --detect.project.version.name=
        #       --logging.level.com.synopsys.integration=TRACE --detect.blackduck.signature.scanner.paths= --detect.source.path=$(pwd)
        ####
        services:

          sec-verify-sca-blackduck-detect:
            image: seceng-devsecops-platform.docker.artifactory.company.com/devsecops/client/runtime/blackduck:7-python-3.9
            container_name: devsecops-client-blackduck-sca
            environment:
              SECENG_DEVSECOPS_CLIENT_BLACKDUCK_HOST: ${SECENG_DEVSECOPS_CLIENT_BLACKDUCK_HOST}
              SECENG_DEVSECOPS_CLIENT_BLACKDUCK_TOKEN: ${SECENG_DEVSECOPS_CLIENT_BLACKDUCK_TOKEN}
              SECENG_DEVSECOPS_CLIENT_BLACKDUCK_PROJECT_NAME: ${SECENG_DEVSECOPS_CLIENT_BLACKDUCK_PROJECT_NAME}
              SECENG_DEVSECOPS_CLIENT_BLACKDUCK_PROJECT_VERSION: ${SECENG_DEVSECOPS_CLIENT_BLACKDUCK_PROJECT_VERSION}
              #DETECT_VERSION: "6"

              # Just make it build at .venv dir, but it may fail in Blackduck
              #PIPENV_VENV_IN_PROJECT: "1"

              # DO NOT add dev, only if required https://stackoverflow.com/questions/53452152/what-is-pipenv-dev-packages-section-for/53452214#53452214
              PIPENV_SYNC_CMD: "pipenv sync -v"

            working_dir: /seceng/devsecops/repo/git.company.com/S2E2/VVM_tools
            volumes:
              - ./:/seceng/devsecops/repo/git.company.com/S2E2/VVM_tools
              - ./build/reports/sec:/root/blackduck/runs
              - ./build/pip-cache:/root/.local/

            command:
              - -de
              - --blackduck.url=${SECENG_DEVSECOPS_CLIENT_BLACKDUCK_HOST}
              - --blackduck.api.token=${SECENG_DEVSECOPS_CLIENT_BLACKDUCK_TOKEN}
              - --detect.project.name=${SECENG_DEVSECOPS_CLIENT_BLACKDUCK_PROJECT_NAME}
              - --detect.project.version.name=${SECENG_DEVSECOPS_CLIENT_BLACKDUCK_PROJECT_VERSION}

              # https://blackducksoftware.github.io/synopsys-detect/6.3.0/properties/detectors/pip/#pip-include-only-project-tree
              #- --detect.pip.only.project.tree=true
              - --logging.level.com.synopsys.integration=TRACE

              # https://blackducksoftware.github.io/synopsys-detect/6.3.0/properties/configuration/signature%20scanner/#signature-scanner-target-paths
              #- --detect.blackduck.signature.scanner.paths=scripts,tests,workflow,workflow_logic

              - --detect.source.path=/seceng/devsecops/repo/git.company.com/S2E2/VVM_tools
        EOT
      
        echo "Executing command docker run --rm -u root -v $(pwd):$(pwd) -w $(pwd) -v /var/run/docker.sock:/var/run/docker.sock -e JOB_NAME=${{ inputs.prisma-cloud-job-name }} -e JOB_URL=${{ inputs.prisma-cloud-job-url }} ${{ inputs.prisma-cloud-twistcli-docker-image }} images scan --address ${{ inputs.prisma-cloud-url }} --project ${{ inputs.prisma-cloud-project }} --user ${{ inputs.prisma-cloud-username }} --password ******** --details --output-file twistcli-output-results.json ${{ inputs.docker-image-tag-to-scan }}"

    - name: Show created file
      shell: bash
      run: |
        cat docker-compose-blackduck-detect-sca.yaml


    - name: Debug all
      shell: bash
      run: |
        echo "${{steps.set-a.outputs.a}} AND AND AND ${{steps.set-b.outputs.b}}
